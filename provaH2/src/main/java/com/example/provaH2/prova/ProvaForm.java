package com.example.provaH2.prova;

import com.example.provaH2.entity.Account;
import com.example.provaH2.repository.AccountRepository;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.DesignRoot;
import com.vaadin.data.Binder;
import com.vaadin.data.Validator;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.event.ShortcutAction;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.server.Page;
import com.vaadin.server.UserError;
import com.vaadin.server.VaadinService;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.shared.util.SharedUtil;
import com.vaadin.spring.annotation.SpringView;
import com.vaadin.ui.*;
import com.vaadin.ui.declarative.Design;
import com.vaadin.ui.themes.ValoTheme;
import de.codecamp.vaadin.webnotifications.WebNotifications;
import org.springframework.beans.factory.annotation.Autowired;

import javax.annotation.PostConstruct;
import java.util.Objects;

/**
 * !! DO NOT EDIT THIS FILE !!
 * <p>
 * This class is generated by Vaadin Designer and will be overwritten.
 * <p>
 * Please make a subclass with logic and additional interfaces as needed,
 * e.g class LoginView extends LoginDesign implements View { }
 */
@DesignRoot
@AutoGenerated
@SuppressWarnings("serial")
public class ProvaForm extends VerticalLayout {
    protected Label emailLabel;

    public ProvaForm() {
        Design.read(this);
    }

    @SpringView(name = "dashboard")
    public static class DashboardView extends VerticalLayout implements View {

        @Autowired
        private AccountRepository accountRepository;
        private HorizontalLayout changePasswordLayout;
        @PostConstruct
        protected  void  initialize(){
            addComponent(new Label("Dashboard"));

            Button b= new Button("Logout");
            b.addClickListener(clickEvent -> {
                VaadinService.getCurrentRequest().getWrappedSession().setAttribute("loggato", false);
                VaadinService.getCurrentRequest().getWrappedSession().setAttribute("accountId", null);
                Page.getCurrent().setLocation("/");
            });
            addComponent(b);
            /*
            * RELEASE NOTES
            *    Ensure that notification is shown with UI access.
            *    Make the callback Runnables serializable.
            *    Add option to focus browser and tab on click.
            * */
            Button b1= new Button("Mostra notifica");
            b1.addClickListener(clickEvent -> {
                WebNotifications.create(b1, "Title")
                        .body("Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.")
                        /*.icon("theme://img/logo.png")*/.tag("sometag")
                        .onClick(() -> {
                            Notification.show("onClick");
                            //TODO: qua devo fare in modo di mettere che va su una pagina
                        }).show();

            });
            addComponent(b1);

            Button link=new Button("prova link");
            link.addClickListener(clickEvent -> {
               getUI().getNavigator().navigateTo("customers");
            });
            link.addStyleName(ValoTheme.BUTTON_LINK);
            link.addStyleName("linkProva");
            addComponent(link);

            Long id=(Long)  VaadinService.getCurrentRequest().getWrappedSession().getAttribute("accountId");
            Account account= accountRepository.findOneById(id);
            GridLayout infoAccount= new GridLayout();
            infoAccount.setRows(2);
            infoAccount.setColumns(2);

            infoAccount.addComponent(new Label("username"));
            infoAccount.addComponent(new Label(account.getFullName()));
            infoAccount.addComponent(new Label("email"));
            infoAccount.addComponent(new Label(account.getEmail()));
            infoAccount.setSpacing(true);
            addComponent(infoAccount);

            changePasswordLayout= new HorizontalLayout();
            Button changePassword= new Button("Change password");
            changePassword.addClickListener(clickEvent -> {
                formChangePassword();
            });
            changePasswordLayout.addComponent(changePassword);
            addComponent(changePasswordLayout);
        }

        private void formChangePassword(){
            FormLayout formLayout= new FormLayout();
            PasswordField originalPassword= new PasswordField("original password");
            PasswordField newPassword= new PasswordField("new password");
            PasswordField repeatPassword= new PasswordField("repeat password");
            Label error= new Label("wrong password");
            Label notMatch= new Label("Entered password and confirmation password must match");
            Button submit= new Button("Change");
            formLayout.addComponent(originalPassword);
            formLayout.addComponent(newPassword);
            formLayout.addComponent(repeatPassword);

            formLayout.addComponent(submit);

            submit.setEnabled(false);
            submit.setClickShortcut(ShortcutAction.KeyCode.ENTER);
            submit.addClickListener(clickEvent -> {
                Long id=(Long)  VaadinService.getCurrentRequest().getWrappedSession().getAttribute("accountId");
                Account account= accountRepository.findOneById(id);
                if(account.getPassword().equals(originalPassword.getValue())){
                    Notification.show("Password changed");
                    accountRepository.updatePassword(id, newPassword.getValue());
                    getUI().access(() -> changePasswordLayout.removeComponent(formLayout) );
                }else{
                    formLayout.addComponent(error);
                }
            });

            Binder<Account> binder= new Binder();
            binder.setBean(new Account());

            binder.forField(originalPassword)
                    .asRequired("Must enter password")
                    .bind(Account::getPassword, (person, password) -> {});

            binder.forField(newPassword)
                    .asRequired("Password may not be empty")
                    .withValidator(new StringLengthValidator(
                            "Password must be at least 7 characters long", 7, null))
                    .bind(Account::getPassword, Account::setPassword);

            binder.forField(repeatPassword)
                    .asRequired("Must confirm password")
                    .bind(Account::getPassword, (person, password) -> {});

            binder.withValidator(Validator.from(account -> {
                if (newPassword.isEmpty() || repeatPassword.isEmpty()) {
                    getUI().access(() -> formLayout.removeComponent(notMatch));
                    return true;
                } else {
                    if(Objects.equals(newPassword.getValue(), repeatPassword.getValue())){
                        getUI().access(() -> formLayout.removeComponent(notMatch));
                        return true;
                    } else {
                        getUI().access(() -> formLayout.addComponent(notMatch));
                        return false;
                    }
                }
            }, "Entered password and confirmation password must match"));

            binder.addStatusChangeListener(
                    event -> getUI().access(() -> {
                        submit.setEnabled(binder.isValid());
                    }));

            originalPassword.addValueChangeListener(valueChangeEvent -> formLayout.removeComponent(error));
            newPassword.addValueChangeListener(valueChangeEvent -> formLayout.removeComponent(error));
            repeatPassword.addValueChangeListener(valueChangeEvent -> formLayout.removeComponent(error));
            getUI().access(() -> {
                changePasswordLayout.addComponent(formLayout);
            });
        }

        @Override
        public void enter(ViewChangeListener.ViewChangeEvent event) {

        }
    }

    //@SpringView(name = "settings")
    public static class SettingsValo extends VerticalLayout implements View{


        private boolean readOnly = true;

        public SettingsValo() {
            setSpacing(true);
            setMargin(true);

            Label title = new Label("Forms");
            title.addStyleName(ValoTheme.LABEL_H1);
            addComponent(title);

            final FormLayout form = new FormLayout();
            form.setMargin(false);
            form.setWidth("800px");
            form.addStyleName(ValoTheme.FORMLAYOUT_LIGHT);
            addComponent(form);

            Label section = new Label("Personal Info");
            section.addStyleName(ValoTheme.LABEL_H2);
            section.addStyleName(ValoTheme.LABEL_COLORED);
            form.addComponent(section);
            StringGenerator2 sg = new StringGenerator2();

            TextField name = new TextField("Name");
            name.setValue(sg.nextString(true) + " " + sg.nextString(true));
            name.setWidth("50%");
            form.addComponent(name);

           /* AbstractDateField<LocalDate, DateResolution> birthday = new TestDateField("Birthday");
            birthday.setValue(LocalDate.of(1980, 1, 31));
            form.addComponent(birthday);
    */
            TextField username = new TextField("Username");
            username.setValue(sg.nextString(false) + sg.nextString(false));
            //username.setRequired(true);
            form.addComponent(username);

            /*OptionGroup sex = new OptionGroup("Sex");
            sex.addItem("Female");
            sex.addItem("Male");
            sex.select("Male");
            sex.addStyleName(ValoTheme.OPTIONGROUP_HORIZONTAL);
            form.addComponent(sex);
    */
            section = new Label("Contact Info");
            section.addStyleName(ValoTheme.LABEL_H3);
            section.addStyleName(ValoTheme.LABEL_COLORED);
            form.addComponent(section);

            TextField email = new TextField("Email");
            email.setValue(
                    sg.nextString(false) + "@" + sg.nextString(false) + ".com");
            email.setWidth("50%");
            //email.setRequired(true);
            form.addComponent(email);

            TextField location = new TextField("Location");
            location.setValue(sg.nextString(true) + ", " + sg.nextString(true));
            location.setWidth("50%");
            location.setComponentError(new UserError("This address doesn't exist"));
            form.addComponent(location);

            TextField phone = new TextField("Phone");
            phone.setWidth("50%");
            form.addComponent(phone);

            HorizontalLayout wrap = new HorizontalLayout();
            wrap.setSpacing(true);
            wrap.setDefaultComponentAlignment(Alignment.MIDDLE_LEFT);
            wrap.setCaption("Newsletter");
            CheckBox newsletter = new CheckBox("Subscribe to newsletter", true);
            wrap.addComponent(newsletter);

            ComboBox period = new ComboBox();
            period.setTextInputAllowed(false);
            /*period.addItem("Daily");
            period.addItem("Weekly");
            period.addItem("Montly");
            period.setNullSelectionAllowed(false);
            period.select("Weekly");
            */period.addStyleName(ValoTheme.COMBOBOX_SMALL);
            period.setWidth("10em");
            wrap.addComponent(period);
            form.addComponent(wrap);

            section = new Label("Additional Info");
            section.addStyleName(ValoTheme.LABEL_H4);
            section.addStyleName(ValoTheme.LABEL_COLORED);
            form.addComponent(section);

            TextField website = new TextField("Website");
            //website.setInputPrompt("http://");
            website.setWidth("100%");
            form.addComponent(website);

            TextArea shortbio = new TextArea("Short Bio");
            shortbio.setValue(
                    "Quis aute iure reprehenderit in voluptate velit esse. Cras mattis iudicium purus sit amet fermentum.");
            shortbio.setWidth("100%");
            shortbio.setRows(2);
            form.addComponent(shortbio);

            final RichTextArea bio = new RichTextArea("Bio");
            bio.setWidth("100%");
            bio.setValue(
                    "<div><p><span>Integer legentibus erat a ante historiarum dapibus.</span> <span>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</span> <span>A communi observantia non est recedendum.</span> <span>Morbi fringilla convallis sapien, id pulvinar odio volutpat.</span> <span>Ab illo tempore, ab est sed immemorabili.</span> <span>Quam temere in vitiis, legem sancimus haerentia.</span></p><p><span>Morbi odio eros, volutpat ut pharetra vitae, lobortis sed nibh.</span> <span>Quam diu etiam furor iste tuus nos eludet?</span> <span>Cum sociis natoque penatibus et magnis dis parturient.</span> <span>Quam diu etiam furor iste tuus nos eludet?</span> <span>Tityre, tu patulae recubans sub tegmine fagi  dolor.</span></p><p><span>Curabitur blandit tempus ardua ridiculus sed magna.</span> <span>Phasellus laoreet lorem vel dolor tempus vehicula.</span> <span>Etiam habebis sem dicantur magna mollis euismod.</span> <span>Hi omnes lingua, institutis, legibus inter se differunt.</span></p></div>");
            form.addComponent(bio);

            bio.setReadOnly(true);

            Button edit = new Button("Edit", event -> {
                if (readOnly) {
                    bio.setReadOnly(false);
                    form.removeStyleName(ValoTheme.FORMLAYOUT_LIGHT);
                    event.getButton().setCaption("Save");
                    event.getButton().addStyleName(ValoTheme.BUTTON_PRIMARY);
                } else {
                    bio.setReadOnly(true);
                    form.addStyleName(ValoTheme.FORMLAYOUT_LIGHT);
                    event.getButton().setCaption("Edit");
                    event.getButton().removeStyleName(ValoTheme.BUTTON_PRIMARY);
                }
                readOnly = !readOnly;
            });

            HorizontalLayout footer = new HorizontalLayout();
            footer.setMargin(new MarginInfo(true, false));
            footer.setSpacing(true);
            footer.setDefaultComponentAlignment(Alignment.MIDDLE_LEFT);
            form.addComponent(footer);
            footer.addComponent(edit);

            Label lastModified = new Label("Last modified by you a minute ago");
            lastModified.addStyleName(ValoTheme.LABEL_LIGHT);
            footer.addComponent(lastModified);
        }

        private class StringGenerator2 {
            String[] strings = { "lorem", "ipsum", "dolor", "sit",
                    "amet", "consectetur", "quid", "securi", "etiam", "tamquam", "eu",
                    "fugiat", "nulla", "pariatur" };
            int stringCount = -1;

            String nextString(boolean capitalize) {
                if (++stringCount >= strings.length) {
                    stringCount = 0;
                }
                return capitalize ? SharedUtil.capitalize(strings[stringCount])
                        : strings[stringCount];
            }

        }
    }
}
